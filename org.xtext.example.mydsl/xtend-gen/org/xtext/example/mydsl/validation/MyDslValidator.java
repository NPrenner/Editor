/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.xtext.example.mydsl.myDsl.Activity;
import org.xtext.example.mydsl.myDsl.BusinessProcess;
import org.xtext.example.mydsl.myDsl.ChannelDefintion;
import org.xtext.example.mydsl.myDsl.Communication;
import org.xtext.example.mydsl.myDsl.Data;
import org.xtext.example.mydsl.myDsl.DataQuery;
import org.xtext.example.mydsl.myDsl.Function;
import org.xtext.example.mydsl.myDsl.Interview;
import org.xtext.example.mydsl.myDsl.Message;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Parameter;
import org.xtext.example.mydsl.myDsl.Role;
import org.xtext.example.mydsl.myDsl.Roletype;
import org.xtext.example.mydsl.myDsl.Systemtype;
import org.xtext.example.mydsl.myDsl.Systemwork;
import org.xtext.example.mydsl.myDsl.Task;
import org.xtext.example.mydsl.myDsl.TypeDefinition;
import org.xtext.example.mydsl.validation.AbstractMyDslValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  public final static String INVALID_PARAMETER = "invalidParameter";
  
  public final static String INVALID_OTHER_ROLE = "invalidOtherRole";
  
  public final static String INVALID_MAIN_ROLE = "invalidMainRole";
  
  public final static String INVALID_NAME = "invalidName";
  
  public final static String INVALID_FUNCTION = "invalidFunction";
  
  public final static String INVALID_PACKAGE = "invalidPackage";
  
  public final static String INVALID_RETURN_ARGUMENT = "invalidReturnArguement";
  
  public final static String INVALID_OBJECT = "invalidPlayer";
  
  public final static String INVALID_IMPORTANCE = "invalidImportance";
  
  public final static String MISSING = "missing";
  
  /**
   * Hier wird der getippte Code der Sprache überprüft. Der Methodenname gibt immer an an welcher Stelle in der Grammatik der Code
   * überprüft wird. Die Error-Meldung gibt an, was übeprüft wurde.
   */
  @Check
  public void checkCommunicationParameter(final Communication communication) {
    final EList<org.xtext.example.mydsl.myDsl.Object> parameterMList = communication.getParameter();
    Message _message = communication.getMessage();
    final EList<Parameter> parameterList = _message.getParameter();
    int _length = ((Object[])Conversions.unwrapArray(parameterMList, Object.class)).length;
    int _length_1 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _greaterThan = (_length > _length_1);
    if (_greaterThan) {
      this.error("Too many parameters!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    int _length_2 = ((Object[])Conversions.unwrapArray(parameterMList, Object.class)).length;
    int _length_3 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _lessThan = (_length_2 < _length_3);
    if (_lessThan) {
      this.error("Missing parameter!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(parameterMList, Object.class)).length); i++) {
      {
        Parameter _get = parameterList.get(i);
        TypeDefinition parameter = ((TypeDefinition) _get);
        org.xtext.example.mydsl.myDsl.Object _get_1 = parameterMList.get(i);
        TypeDefinition _type = _get_1.getType();
        boolean _equals = Objects.equal(_type, null);
        if (_equals) {
          this.error("Parameter can not be of type \"Boolean\"!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
        String _name = parameter.getName();
        org.xtext.example.mydsl.myDsl.Object _get_2 = parameterMList.get(i);
        TypeDefinition _type_1 = _get_2.getType();
        String _name_1 = _type_1.getName();
        boolean _checkName = this.checkName(_name, _name_1);
        boolean _not = (!_checkName);
        if (_not) {
          this.error("Wrong parameter!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
      }
    }
  }
  
  public boolean checkName(final String name, final String Mname) {
    String _upperCase = name.toUpperCase();
    String _upperCase_1 = Mname.toUpperCase();
    boolean _equals = _upperCase.equals(_upperCase_1);
    if (_equals) {
      return true;
    } else {
      return false;
    }
  }
  
  @Check
  public void checkCommunicationReceiver(final Communication communication) {
    org.xtext.example.mydsl.myDsl.Object _sender = communication.getSender();
    String _name = _sender.getName();
    Role _receiver = communication.getReceiver();
    String _name_1 = _receiver.getName();
    boolean _equals = _name.equals(_name_1);
    if (_equals) {
      this.error("Sender and receiver can not be the same!", MyDslPackage.Literals.COMMUNICATION__RECEIVER, MyDslValidator.INVALID_OTHER_ROLE);
    }
  }
  
  @Check
  public void checkCommunicationImportance(final Communication communication) {
    boolean _and = false;
    String _importance = communication.getImportance();
    boolean _equals = Objects.equal(_importance, null);
    if (!_equals) {
      _and = false;
    } else {
      String _execution = communication.getExecution();
      boolean _equals_1 = _execution.equals("can");
      _and = _equals_1;
    }
    if (_and) {
      this.error("Importance is missing!!", MyDslPackage.Literals.COMMUNICATION__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
    } else {
      boolean _and_1 = false;
      String _importance_1 = communication.getImportance();
      boolean _equals_2 = _importance_1.equals("unim");
      if (!_equals_2) {
        _and_1 = false;
      } else {
        String _execution_1 = communication.getExecution();
        boolean _equals_3 = _execution_1.equals("must");
        _and_1 = _equals_3;
      }
      if (_and_1) {
        this.error("Wrong Importance!", MyDslPackage.Literals.COMMUNICATION__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
      }
    }
  }
  
  @Check
  public void checkActivityImportance(final Activity activity) {
    boolean _and = false;
    String _importance = activity.getImportance();
    boolean _equals = Objects.equal(_importance, null);
    if (!_equals) {
      _and = false;
    } else {
      String _execution = activity.getExecution();
      boolean _equals_1 = _execution.equals("can");
      _and = _equals_1;
    }
    if (_and) {
      this.error("Importance is missing!", MyDslPackage.Literals.ACTIVITY__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
    } else {
      boolean _and_1 = false;
      String _importance_1 = activity.getImportance();
      boolean _equals_2 = _importance_1.equals("unim");
      if (!_equals_2) {
        _and_1 = false;
      } else {
        String _execution_1 = activity.getExecution();
        boolean _equals_3 = _execution_1.equals("must");
        _and_1 = _equals_3;
      }
      if (_and_1) {
        this.error("Wrong Importance!", MyDslPackage.Literals.ACTIVITY__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
      }
    }
  }
  
  @Check
  public void checkSystemworkImportance(final Systemwork systemwork) {
    boolean _and = false;
    String _importance = systemwork.getImportance();
    boolean _equals = Objects.equal(_importance, null);
    if (!_equals) {
      _and = false;
    } else {
      String _execution = systemwork.getExecution();
      boolean _equals_1 = _execution.equals("can");
      _and = _equals_1;
    }
    if (_and) {
      this.error("Importance is missing!!", MyDslPackage.Literals.SYSTEMWORK__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
    } else {
      boolean _and_1 = false;
      String _importance_1 = systemwork.getImportance();
      boolean _equals_2 = _importance_1.equals("unim");
      if (!_equals_2) {
        _and_1 = false;
      } else {
        String _execution_1 = systemwork.getExecution();
        boolean _equals_3 = _execution_1.equals("must");
        _and_1 = _equals_3;
      }
      if (_and_1) {
        this.error("Wrong Importance!", MyDslPackage.Literals.SYSTEMWORK__IMPORTANCE, MyDslValidator.INVALID_IMPORTANCE);
      }
    }
  }
  
  @Check
  public void checkActivityParameter(final Activity activity) {
    final EList<org.xtext.example.mydsl.myDsl.Object> parameterAList = activity.getParameter();
    Task _task = activity.getTask();
    final EList<Parameter> parameterList = _task.getParameter();
    int _length = ((Object[])Conversions.unwrapArray(parameterAList, Object.class)).length;
    int _length_1 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _greaterThan = (_length > _length_1);
    if (_greaterThan) {
      this.error("too many parameters", MyDslPackage.Literals.ACTIVITY__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    int _length_2 = ((Object[])Conversions.unwrapArray(parameterAList, Object.class)).length;
    int _length_3 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _lessThan = (_length_2 < _length_3);
    if (_lessThan) {
      this.error("missing parameter", MyDslPackage.Literals.ACTIVITY__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(parameterAList, Object.class)).length); i++) {
      {
        Parameter _get = parameterList.get(i);
        TypeDefinition parameter = ((TypeDefinition) _get);
        org.xtext.example.mydsl.myDsl.Object _get_1 = parameterAList.get(i);
        TypeDefinition _type = _get_1.getType();
        boolean _equals = Objects.equal(_type, null);
        if (_equals) {
          this.error("Parameter can not be of type \"Boolean\"!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
        String _name = parameter.getName();
        org.xtext.example.mydsl.myDsl.Object _get_2 = parameterAList.get(i);
        TypeDefinition _type_1 = _get_2.getType();
        String _name_1 = _type_1.getName();
        boolean _checkName = this.checkName(_name, _name_1);
        boolean _not = (!_checkName);
        if (_not) {
          this.error("wrong parameter", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
      }
    }
  }
  
  @Check
  public void checkInterviewMainPlayer(final Interview interview) {
    Role _mainrole = interview.getMainrole();
    EClass _eClass = _mainrole.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("Role");
    boolean _not = (!_equals);
    if (_not) {
      this.error("Mainrole must be of type \"Role\"!", MyDslPackage.Literals.INTERVIEW__MAINROLE, MyDslValidator.INVALID_PARAMETER);
    }
  }
  
  @Check
  public void checkSystemworkParameter(final Systemwork systemActivity) {
    final EList<org.xtext.example.mydsl.myDsl.Object> parameterSList = systemActivity.getParameter();
    Function _function = systemActivity.getFunction();
    final EList<Parameter> parameterList = _function.getParameter();
    int _length = ((Object[])Conversions.unwrapArray(parameterSList, Object.class)).length;
    int _length_1 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _greaterThan = (_length > _length_1);
    if (_greaterThan) {
      this.error("too many parameters", MyDslPackage.Literals.SYSTEMWORK__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    int _length_2 = ((Object[])Conversions.unwrapArray(parameterSList, Object.class)).length;
    int _length_3 = ((Object[])Conversions.unwrapArray(parameterList, Object.class)).length;
    boolean _lessThan = (_length_2 < _length_3);
    if (_lessThan) {
      this.error("missing parameter", MyDslPackage.Literals.SYSTEMWORK__PARAMETER, MyDslValidator.INVALID_PARAMETER);
      return;
    }
    for (int i = 0; (i < ((Object[])Conversions.unwrapArray(parameterSList, Object.class)).length); i++) {
      {
        Parameter _get = parameterList.get(i);
        TypeDefinition parameter = ((TypeDefinition) _get);
        org.xtext.example.mydsl.myDsl.Object _get_1 = parameterSList.get(i);
        TypeDefinition _type = _get_1.getType();
        boolean _equals = Objects.equal(_type, null);
        if (_equals) {
          this.error("Parameter can not be of type \"Boolean\"!", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
        String _name = parameter.getName();
        org.xtext.example.mydsl.myDsl.Object _get_2 = parameterSList.get(i);
        TypeDefinition _type_1 = _get_2.getType();
        String _name_1 = _type_1.getName();
        boolean _checkName = this.checkName(_name, _name_1);
        boolean _not = (!_checkName);
        if (_not) {
          this.error("wrong parameter", MyDslPackage.Literals.COMMUNICATION__PARAMETER, MyDslValidator.INVALID_PARAMETER);
        }
      }
    }
  }
  
  @Check
  public void checkInterviewName(final Interview interview) {
    String _name = interview.getName();
    boolean _equals = _name.equals("");
    if (_equals) {
      this.error("Interview name can not be empty", MyDslPackage.Literals.INTERVIEW__NAME, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkProcessName(final BusinessProcess process) {
    String _name = process.getName();
    boolean _equals = _name.equals("");
    if (_equals) {
      this.error("Process name can not be empty", MyDslPackage.Literals.BUSINESS_PROCESS__NAME, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkSystemworkFunction(final Systemwork systemActivity) {
    boolean _and = false;
    org.xtext.example.mydsl.myDsl.Object _returnObject = systemActivity.getReturnObject();
    boolean _notEquals = (!Objects.equal(_returnObject, null));
    if (!_notEquals) {
      _and = false;
    } else {
      Function _function = systemActivity.getFunction();
      boolean _isReturnValue = _function.isReturnValue();
      boolean _equals = (_isReturnValue == false);
      _and = _equals;
    }
    if (_and) {
      this.error("need function with return argument", MyDslPackage.Literals.SYSTEMWORK__FUNCTION, MyDslValidator.INVALID_FUNCTION);
    }
  }
  
  @Check
  public void checkSystemworkReturnPlayer(final Systemwork systemwork) {
    org.xtext.example.mydsl.myDsl.Object _returnObject = systemwork.getReturnObject();
    boolean _notEquals = (!Objects.equal(_returnObject, null));
    if (_notEquals) {
      boolean _and = false;
      org.xtext.example.mydsl.myDsl.Object _returnObject_1 = systemwork.getReturnObject();
      TypeDefinition _type = _returnObject_1.getType();
      boolean _equals = Objects.equal(_type, null);
      if (!_equals) {
        _and = false;
      } else {
        Function _function = systemwork.getFunction();
        String _returnBool = _function.getReturnBool();
        boolean _equals_1 = Objects.equal(_returnBool, null);
        _and = _equals_1;
      }
      if (_and) {
        this.error("Need not Boolean!", MyDslPackage.Literals.SYSTEMWORK__RETURN_OBJECT, MyDslValidator.INVALID_RETURN_ARGUMENT);
        return;
      }
      boolean _and_1 = false;
      org.xtext.example.mydsl.myDsl.Object _returnObject_2 = systemwork.getReturnObject();
      TypeDefinition _type_1 = _returnObject_2.getType();
      boolean _notEquals_1 = (!Objects.equal(_type_1, null));
      if (!_notEquals_1) {
        _and_1 = false;
      } else {
        Function _function_1 = systemwork.getFunction();
        String _returnBool_1 = _function_1.getReturnBool();
        boolean _notEquals_2 = (!Objects.equal(_returnBool_1, null));
        _and_1 = _notEquals_2;
      }
      if (_and_1) {
        this.error("Need Boolean!", MyDslPackage.Literals.SYSTEMWORK__RETURN_OBJECT, MyDslValidator.INVALID_RETURN_ARGUMENT);
        return;
      }
      Function _function_2 = systemwork.getFunction();
      TypeDefinition _returnArgument = _function_2.getReturnArgument();
      TypeDefinition argument = ((TypeDefinition) _returnArgument);
      String _name = argument.getName();
      org.xtext.example.mydsl.myDsl.Object _returnObject_3 = systemwork.getReturnObject();
      TypeDefinition _type_2 = _returnObject_3.getType();
      String _name_1 = _type_2.getName();
      boolean _checkName = this.checkName(_name, _name_1);
      boolean _not = (!_checkName);
      if (_not) {
        this.error("Wrong return Argument", MyDslPackage.Literals.SYSTEMWORK__RETURN_OBJECT, MyDslValidator.INVALID_RETURN_ARGUMENT);
      }
    }
  }
  
  @Check
  public void checkRoleDefinitionName(final Roletype roleDefinition) {
    String _name = roleDefinition.getName();
    char _charAt = _name.charAt(0);
    boolean _isUpperCase = Character.isUpperCase(_charAt);
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.error("Name should start with a capital ", MyDslPackage.Literals.TYPE_DEFINITION__NAME, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkSystemDefinitionName(final Systemtype system) {
    String _name = system.getName();
    char _charAt = _name.charAt(0);
    boolean _isUpperCase = Character.isUpperCase(_charAt);
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.error("Name must start with a capital!", MyDslPackage.Literals.TYPE_DEFINITION__NAME, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkCommunicationSender(final Communication communication) {
    boolean _or = false;
    org.xtext.example.mydsl.myDsl.Object _sender = communication.getSender();
    EClass _eClass = _sender.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("System");
    if (_equals) {
      _or = true;
    } else {
      org.xtext.example.mydsl.myDsl.Object _sender_1 = communication.getSender();
      EClass _eClass_1 = _sender_1.eClass();
      String _name_1 = _eClass_1.getName();
      boolean _equals_1 = _name_1.equals("Role");
      _or = _equals_1;
    }
    boolean _not = (!_or);
    if (_not) {
      this.error("Sender must be of type \"System\" or \"Role\"!", MyDslPackage.Literals.COMMUNICATION__SENDER, MyDslValidator.INVALID_OBJECT);
    }
  }
  
  @Check
  public void checkDataQueryPlayerTwo(final DataQuery query) {
    org.xtext.example.mydsl.myDsl.Object _objectTwo = query.getObjectTwo();
    TypeDefinition _type = _objectTwo.getType();
    boolean _equals = Objects.equal(_type, null);
    if (_equals) {
      this.error("Object can not be a Boolean", MyDslPackage.Literals.DATA_QUERY__OBJECT_TWO, MyDslValidator.INVALID_OBJECT);
      return;
    }
    org.xtext.example.mydsl.myDsl.Object _objectOne = query.getObjectOne();
    TypeDefinition _type_1 = _objectOne.getType();
    String _name = _type_1.getName();
    org.xtext.example.mydsl.myDsl.Object _objectTwo_1 = query.getObjectTwo();
    TypeDefinition _type_2 = _objectTwo_1.getType();
    String _name_1 = _type_2.getName();
    boolean _equals_1 = _name.equals(_name_1);
    boolean _not = (!_equals_1);
    if (_not) {
      this.error("Objects must have the same type!", MyDslPackage.Literals.DATA_QUERY__OBJECT_TWO, MyDslValidator.INVALID_OBJECT);
    }
  }
  
  @Check
  public void checkDataQueryPlayerOne(final DataQuery query) {
    org.xtext.example.mydsl.myDsl.Object _objectOne = query.getObjectOne();
    TypeDefinition _type = _objectOne.getType();
    boolean _equals = Objects.equal(_type, null);
    if (_equals) {
      this.error("Object can not be a Boolean", MyDslPackage.Literals.DATA_QUERY__OBJECT_ONE, MyDslValidator.INVALID_OBJECT);
    }
  }
  
  @Check
  public void checkDataQueryExclamation(final DataQuery query) {
    boolean _isExclamation = query.isExclamation();
    if (_isExclamation) {
      this.warning("!=", MyDslPackage.Literals.DATA_QUERY__EXCLAMATION, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkFunctionReturnValue(final Function function) {
    boolean _isReturnValue = function.isReturnValue();
    if (_isReturnValue) {
      boolean _and = false;
      TypeDefinition _returnArgument = function.getReturnArgument();
      boolean _equals = Objects.equal(_returnArgument, null);
      if (!_equals) {
        _and = false;
      } else {
        String _returnBool = function.getReturnBool();
        boolean _equals_1 = Objects.equal(_returnBool, null);
        _and = _equals_1;
      }
      if (_and) {
        this.error("Function need a return argument!", MyDslPackage.Literals.FUNCTION__RETURN_VALUE, MyDslValidator.INVALID_NAME);
      }
    }
  }
  
  @Check
  public void checkSystemType(final org.xtext.example.mydsl.myDsl.System system) {
    org.xtext.example.mydsl.myDsl.Object systemtype = ((org.xtext.example.mydsl.myDsl.Object) system);
    TypeDefinition _type = systemtype.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("Systemtype");
    boolean _not = (!_equals);
    if (_not) {
      this.error("Object must be any \"System\"", MyDslPackage.Literals.OBJECT__TYPE, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkRoleType(final Role role) {
    org.xtext.example.mydsl.myDsl.Object roletype = ((org.xtext.example.mydsl.myDsl.Object) role);
    TypeDefinition _type = roletype.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("Roletype");
    boolean _not = (!_equals);
    if (_not) {
      this.error("Object must be any \"Role\"", MyDslPackage.Literals.OBJECT__TYPE, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkDataType(final Data data) {
    org.xtext.example.mydsl.myDsl.Object datatype = ((org.xtext.example.mydsl.myDsl.Object) data);
    TypeDefinition _type = datatype.getType();
    EClass _eClass = _type.eClass();
    String _name = _eClass.getName();
    boolean _equals = _name.equals("Datatype");
    boolean _not = (!_equals);
    if (_not) {
      this.error("Object must be any \"Data\"", MyDslPackage.Literals.OBJECT__TYPE, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkBooleanType(final org.xtext.example.mydsl.myDsl.Boolean bool) {
    TypeDefinition _type = bool.getType();
    boolean _notEquals = (!Objects.equal(_type, null));
    if (_notEquals) {
      this.error("Object is a Boolean", MyDslPackage.Literals.OBJECT__TYPE, MyDslValidator.INVALID_NAME);
    }
  }
  
  @Check
  public void checkCommunicationChannel(final Communication communication) {
    ChannelDefintion _channel = communication.getChannel();
    boolean _equals = Objects.equal(_channel, null);
    if (_equals) {
      this.warning("Missing Channel!", MyDslPackage.Literals.COMMUNICATION__CHANNEL, MyDslValidator.MISSING);
    }
  }
}
