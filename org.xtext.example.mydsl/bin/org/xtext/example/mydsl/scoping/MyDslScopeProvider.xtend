/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.xtext.scoping.IScope
import org.xtext.example.mydsl.myDsl.Message
import org.eclipse.emf.ecore.EReference
import java.util.ArrayList
import org.xtext.example.mydsl.myDsl.Task
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.myDsl.Interview

import org.xtext.example.mydsl.myDsl.Activity
import org.xtext.example.mydsl.myDsl.Function

import org.xtext.example.mydsl.myDsl.State
import org.xtext.example.mydsl.myDsl.PlayerQuery
import org.xtext.example.mydsl.myDsl.Systemwork
import org.xtext.example.mydsl.myDsl.Communication
import org.xtext.example.mydsl.myDsl.Object
import org.xtext.example.mydsl.myDsl.Roletype
import org.xtext.example.mydsl.myDsl.Systemtype

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class MyDslScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider{
	

	
	def IScope scope_Communication_message(Communication communication, EReference ref) {
		val scope = new ArrayList<Message>()
		var role = communication.receiver.type as Roletype
		scope.addAll(role.messages)
		return Scopes::scopeFor(scope)
	}
	
	 def IScope scope_Commuincation_parameter(Communication communication, EReference ref){
		val scope = new ArrayList<Object>()
		val interview = communication.eContainer.eContainer as Interview
		scope.add(interview.mainrole as Object)
		scope.addAll(interview.objects)
		return Scopes::scopeFor(scope)
	} 
	
	def IScope scope_Activity_parameter(Activity activity, EReference ref){
		val scope = new ArrayList<Object>()
		val interview = activity.eContainer.eContainer as Interview
		scope.addAll(interview.objects )
		return Scopes::scopeFor(scope)
	}
	
	def IScope scope_Activity_task(Activity activity, EReference ref) {
		val scope = new ArrayList<Task>()
		var role = activity.role.type as Roletype
		scope.addAll(role.tasks)
		return Scopes::scopeFor(scope)
	}
	
	def IScope scope_PlayerQuery_status(PlayerQuery query, EReference ref){
		val scope = new ArrayList<State>()
		var role = query.player.type as Roletype
		scope.addAll(role.state)
		return Scopes::scopeFor(scope)
	}
	
	def IScope scope_Systemwork_function(Systemwork systemActivity, EReference ref){
		val scope = new ArrayList<Function>()
		var system = systemActivity.system.type as Systemtype
		scope.addAll(system.functions)
		return Scopes::scopeFor(scope)
	}
	
	

	
	
	
	
	
}
