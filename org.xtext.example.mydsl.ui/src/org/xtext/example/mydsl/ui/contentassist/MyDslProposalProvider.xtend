/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.ui.contentassist

import org.xtext.example.mydsl.ui.contentassist.AbstractMyDslProposalProvider
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.xtext.example.mydsl.myDsl.Activity
import org.xtext.example.mydsl.myDsl.Systemwork
import org.xtext.example.mydsl.myDsl.Communication
import org.xtext.example.mydsl.myDsl.TypeDefinition
import org.xtext.example.mydsl.myDsl.Systemtype
import org.xtext.example.mydsl.myDsl.Roletype

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class MyDslProposalProvider extends AbstractMyDslProposalProvider {
	
	 override completeCommunication_Message(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val communication = model as Communication
		var receiver = communication.receiver.type as Roletype
		for(var n = 0;n < receiver.messages.length; n++){
			var paramString = ''
			if(receiver.messages.get(n).parameter.length != 0){
					var typedef = receiver.messages.get(n).parameter.get(0) as TypeDefinition
						paramString = typedef.name
					}
					
				for(var i = 1; i < receiver.messages.get(n).parameter.length; i++){
					var typedef = receiver.messages.get(n).parameter.get(i) as TypeDefinition
					paramString = paramString + " ," + typedef.name
				}
			acceptor.accept(createCompletionProposal(receiver.messages.get(n).name + "("+ ")",receiver.messages.get(n).name + "("+ paramString + ")", receiver.messages.get(n).image, context))
		}
	}

		
	override completeActivity_Task(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		val activity = model as Activity
		var role = activity.role.type as Roletype
		for(var n = 0; n < role.tasks.length; n++){
			var paramString = ''
			if(role.tasks.get(n).parameter.length != 0){
					var typedef = role.tasks.get(n).parameter.get(0) as TypeDefinition
					paramString = typedef.name
				}	
				for(var i = 1; i < role.tasks.get(n).parameter.length; i++){
					 var typedef = role.tasks.get(n).parameter.get(i) as TypeDefinition
					paramString = paramString + " ," + typedef.name
				}
			acceptor.accept(createCompletionProposal(role.tasks.get(n).name + "("+ ")",role.tasks.get(n).name + "("+ paramString + ")", role.tasks.get(n).image, context))
		}
	} 
	
	override completeSystemwork_Function(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			val systemwork = model as Systemwork
			var system = systemwork.system.type as Systemtype
			for(var n = 0; n < system.functions.length; n++){
			var paramString = ''
			if(system.functions.get(n).parameter.length != 0){
				    var typedef = system.functions.get(n).parameter.get(0) as TypeDefinition
					paramString = typedef.name
					
				}	
				for(var i = 1; i < system.functions.get(n).parameter.length; i++){
					var typedef = system.functions.get(n).parameter.get(i) as TypeDefinition
					paramString = paramString + " ," + typedef.name
				}
			acceptor.accept(createCompletionProposal(system.functions.get(n).name + "("+ ")", system.functions.get(n).name + "("+ paramString + ")", system.functions.get(n).image, context))
		}
			
		}
	
	override completeBusinessProcess_Element(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("start{\n \t \n\t } followed{ \n\t \n\t }", "start{} followed{}", model.image, context))
			acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
	
	override completeChart_FollowedElements(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
		
	override completeChart_StartElements(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
		
	override completeStartTimeAlternative_MostlyAlternative(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("start{\n \t \n\t } followed{ \n\t \n\t }", "start{} followed{}", model.image, context))
		    acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
	
	override completeStartTimeAlternative_SometimesAlternative(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("start{\n \t \n\t } followed{ \n\t \n\t }", "start{} followed{}", model.image, context))
		    acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
		
	override completeStartAlternative_Alternative(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor){
			acceptor.accept(createCompletionProposal("start{\n \t \n\t } followed{ \n\t \n\t }", "start{} followed{}", model.image, context))
		    acceptor.accept(createCompletionProposal("mostly{\n \t \n\t } sometimes{ \n\t \n\t }", "mostly{} sometimes{}", model.image, context))
			acceptor.accept(createCompletionProposal("alt{\n \t \n\t } or{ \n\t \n\t }", "alt{} or{}", model.image, context))
		}
		
	 
		
	
}

